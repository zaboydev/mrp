<?php defined('BASEPATH') OR exit('No direct script access allowed');

class Stock_Model extends MY_Model
{
  public function __construct()
  {
    parent::__construct();
  }

  public function getSelectedColumns()
  {
    return array(
      'tb_stocks.id'                                  => NULL,
      'tb_master_items.part_number'                   => 'Part Number',
      'tb_master_items.description'                   => 'Description',
      'tb_master_items.serial_number'                 => 'Serial Number',
      'tb_master_item_groups.category'                => 'Category',
      'tb_master_item_groups.group'                   => 'Group',
      'tb_stocks.condition'                           => 'Condition',
      // 'SUM(tb_stock_in_stores.quantity) - (SUM(tb_receipt_items.received_quantity) - SUM(tb_issuance_items.issued_quantity) + SUM(tb_stock_adjustments.adjustment_quantity)) as initial_quantity' => 'Initial Qty',
      // 'SUM(tb_receipt_items.received_quantity) as received_quantity' => 'Received Qty',
      // 'SUM(tb_issuance_items.issued_quantity) as issued_quantity' => 'Issued Qty',
      // 'SUM(tb_stock_adjustments.adjustment_quantity) as adjustment_quantity' => 'Adjusment Qty',
      'SUM(tb_stock_in_stores.quantity) as quantity'  => 'Stock Quantity',
      'tb_master_items.minimum_quantity'              => 'Min. Stock',
      'tb_master_items.unit'                          => 'Unit',
      'tb_stock_in_stores.stores'                     => 'Stores',
      'tb_stock_in_stores.warehouse'                  => 'Base',
    );
  }

  public function getGroupedColumns()
  {
    return array(
      'tb_stocks.id',
      'tb_master_items.part_number',
      'tb_master_items.description',
      'tb_master_items.serial_number',
      'tb_master_item_groups.category',
      'tb_master_item_groups.group',
      'tb_stocks.condition',
      'tb_master_items.minimum_quantity',
      'tb_master_items.unit',
      'tb_stock_in_stores.stores',
      'tb_stock_in_stores.warehouse',
    );
  }

  public function getSearchableColumns()
  {
    return array(
      'tb_master_items.part_number',
      'tb_master_items.description',
      'tb_master_items.serial_number',
      'tb_master_item_groups.category',
      'tb_master_item_groups.group',
      'tb_master_items.unit',
      'tb_stock_in_stores.stores',
      'tb_stock_in_stores.warehouse',
    );
  }

  public function getOrderableColumns()
  {
    return array(
      NULL,
      'tb_master_items.part_number',
      'tb_master_items.description',
      'tb_master_items.serial_number',
      'tb_master_item_groups.category',
      'tb_master_item_groups.group',
      'tb_stocks.condition',
      // 'SUM(tb_stock_in_stores.quantity) - (SUM(tb_receipt_items.received_quantity) - SUM(tb_issuance_items.issued_quantity) + SUM(tb_stock_adjustments.adjustment_quantity))',
      // 'SUM(tb_receipt_items.received_quantity)',
      // 'SUM(tb_issuance_items.issued_quantity)',
      // 'SUM(tb_stock_adjustments.adjustment_quantity)',
      'SUM(tb_stock_in_stores.quantity)',
      'tb_master_items.minimum_quantity',
      'tb_master_items.unit',
      'tb_stock_in_stores.stores',
      'tb_stock_in_stores.warehouse',
    );
  }

  private function searchIndex()
  {
    $i = 0;

    foreach ($this->getSearchableColumns() as $item){
      if ($_POST['search']['value']){
        $term = strtoupper($_POST['search']['value']);

        if ($i === 0){
          $this->db->group_start();
          $this->db->like('UPPER('.$item.')', $term);
        } else {
          $this->db->or_like('UPPER('.$item.')', $term);
        }

        if (count($this->getSearchableColumns()) - 1 == $i)
          $this->db->group_end();
      }

      $i++;
    }
  }

  public function getIndex($condition = 'SERVICEABLE', $warehouse, $category = NULL, $return = 'array')
  {
    $this->db->select(array_keys($this->getSelectedColumns()));
    $this->db->from('tb_stock_in_stores');
    // $this->db->join('tb_receipt_items', 'tb_receipt_items.stock_in_stores_id = tb_stock_in_stores.id', 'left');
    // $this->db->join('tb_issuance_items', 'tb_issuance_items.stock_in_stores_id = tb_stock_in_stores.id', 'left');
    // $this->db->join('tb_stock_adjustments', 'tb_stock_adjustments.stock_in_stores_id = tb_stock_in_stores.id', 'left');
    $this->db->join('tb_stocks', 'tb_stocks.id = tb_stock_in_stores.stock_id');
    $this->db->join('tb_master_items', 'tb_master_items.id = tb_stocks.item_id');
    $this->db->join('tb_master_item_groups', 'tb_master_item_groups.group = tb_master_items.group');

    if ($warehouse !== "NULL"){
      $this->db->where('tb_stock_in_stores.warehouse', $warehouse);
    }

    $this->db->where('tb_stocks.condition', $condition);
    $this->db->group_by($this->getGroupedColumns());

    if ($category !== NULL){
      $this->db->where('tb_master_item_groups.category', $category);
    }

    $this->searchIndex();

    $orderableColumns = $this->getOrderableColumns();

    if (isset($_POST['order'])){
      foreach ($_POST['order'] as $key => $order){
        $this->db->order_by($orderableColumns[$_POST['order'][$key]['column']], $_POST['order'][$key]['dir']);
      }
    } else {
      $this->db->order_by('id', 'desc');
    }

    if ($_POST['length'] != -1)
      $this->db->limit($_POST['length'], $_POST['start']);

    $query = $this->db->get();

    if ($return === 'object'){
      return $query->result();
    } elseif ($return === 'json'){
      return json_encode($query->result());
    } else {
      return $query->result_array();
    }
  }

  public function countIndexFiltered($condition = 'SERVICEABLE', $warehouse, $category = NULL)
  {
    $this->db->select(array_keys($this->getSelectedColumns()));
    $this->db->from('tb_stock_in_stores');
    // $this->db->join('tb_receipt_items', 'tb_receipt_items.stock_in_stores_id = tb_stock_in_stores.id', 'left');
    // $this->db->join('tb_issuance_items', 'tb_issuance_items.stock_in_stores_id = tb_stock_in_stores.id', 'left');
    // $this->db->join('tb_stock_adjustments', 'tb_stock_adjustments.stock_in_stores_id = tb_stock_in_stores.id', 'left');
    $this->db->join('tb_stocks', 'tb_stocks.id = tb_stock_in_stores.stock_id');
    $this->db->join('tb_master_items', 'tb_master_items.id = tb_stocks.item_id');
    $this->db->join('tb_master_item_groups', 'tb_master_item_groups.group = tb_master_items.group');
    $this->db->group_by($this->getGroupedColumns());

    if ($warehouse !== "NULL"){
      $this->db->where('tb_stock_in_stores.warehouse', $warehouse);
    }

    $this->db->where('tb_stocks.condition', $condition);

    if ($category !== NULL){
      $this->db->where('tb_master_item_groups.category', $category);
    }

    $this->searchIndex();

    $query = $this->db->get();

    return $query->num_rows();
  }

  public function countIndex($condition = 'SERVICEABLE', $warehouse, $category = NULL)
  {
    $this->db->select(array_keys($this->getSelectedColumns()));
    $this->db->from('tb_stock_in_stores');
    // $this->db->join('tb_receipt_items', 'tb_receipt_items.stock_in_stores_id = tb_stock_in_stores.id', 'left');
    // $this->db->join('tb_issuance_items', 'tb_issuance_items.stock_in_stores_id = tb_stock_in_stores.id', 'left');
    // $this->db->join('tb_stock_adjustments', 'tb_stock_adjustments.stock_in_stores_id = tb_stock_in_stores.id', 'left');
    $this->db->join('tb_stocks', 'tb_stocks.id = tb_stock_in_stores.stock_id');
    $this->db->join('tb_master_items', 'tb_master_items.id = tb_stocks.item_id');
    $this->db->join('tb_master_item_groups', 'tb_master_item_groups.group = tb_master_items.group');
    $this->db->group_by($this->getGroupedColumns());

    if ($warehouse !== "NULL"){
      $this->db->where('tb_stock_in_stores.warehouse', $warehouse);
    }

    $this->db->where('tb_stocks.condition', $condition);

    if ($category !== NULL){
      $this->db->where('tb_master_item_groups.category', $category);
    }

    $query = $this->db->get();

    return $query->num_rows();
  }

  public function findStock($id, $stores)
  {
    $selected_column    = array_keys($this->getSelectedColumns());
    $selected_column[]  = 'tb_master_items.alternate_part_number';

    $grouped_column     = $this->getGroupedColumns();
    $grouped_column[]   = 'tb_master_items.alternate_part_number';

    $this->db->select($selected_column);
    $this->db->from('tb_stocks');
    $this->db->join('tb_stock_in_stores', 'tb_stock_in_stores.stock_id = tb_stocks.id');
    $this->db->join('tb_master_items', 'tb_master_items.id = tb_stocks.item_id');
    $this->db->join('tb_master_item_groups', 'tb_master_item_groups.group = tb_master_items.group');
    $this->db->where('tb_stock_in_stores.stores', $stores);
    $this->db->where('tb_stocks.id', $id);
    $this->db->group_by($grouped_column);

    $query  = $this->db->get();
    $row    = $query->unbuffered_row('array');

    $this->db->select('tb_stock_in_stores.*');
    $this->db->from('tb_stock_in_stores');
    // $this->db->join('tb_master_item_serials', 'tb_master_item_serials.id = tb_stock_in_stores.serial_id', 'left');
    $this->db->where('tb_stock_in_stores.stock_id', $id);
    $this->db->where('tb_stock_in_stores.stores', $stores);

    $query  = $this->db->get();
    $result = $query->result_array();
    $row['items'] = $result;

    return $row;
  }

  public function findById($id)
  {
    $selected_column = array(
      'tb_stock_in_stores.*',
      'tb_stocks.condition',
      'tb_master_items.serial_number',
      'tb_master_items.part_number',
      'tb_master_items.description',
      'tb_master_items.alternate_part_number',
      'tb_master_items.minimum_quantity',
      'tb_master_items.unit',
      'tb_master_item_groups.group',
      'tb_master_item_groups.category',
    );

    $this->db->select($selected_column);
    $this->db->from('tb_stock_in_stores');
    $this->db->join('tb_stocks', 'tb_stocks.id = tb_stock_in_stores.stock_id');
    // $this->db->join('tb_master_item_serials', 'tb_master_item_serials.id = tb_stock_in_stores.serial_id', 'left');
    $this->db->join('tb_master_items', 'tb_master_items.id = tb_stocks.item_id');
    $this->db->join('tb_master_item_groups', 'tb_master_item_groups.group = tb_master_items.group');
    $this->db->where('tb_stock_in_stores.id', $id);

    $query  = $this->db->get();
    $row    = $query->unbuffered_row('array');

    return $row;
  }

  public function searchStockInStores()
  {
    $this->column_select = array(
      'tb_stock_in_stores.id',
      'tb_stock_in_stores.stores',
      'tb_stock_in_stores.received_date',
      'tb_stock_in_stores.expired_date',
      'tb_stock_in_stores.unit_value',
      'tb_stock_in_stores.quantity',
      'tb_stocks.condition',
      'tb_master_items.serial_number',
      'tb_master_items.part_number',
      'tb_master_items.description',
      'tb_master_items.alternate_part_number',
      'tb_master_items.group',
      'tb_master_items.unit',
    );

    $this->db->select($this->column_select);
    $this->db->from('tb_stock_in_stores');
    // $this->db->join('tb_master_item_serials', 'tb_master_item_serials.id = tb_stock_in_stores.serial_id', 'left');
    $this->db->join('tb_stocks', 'tb_stocks.id = tb_stock_in_stores.stock_id');
    $this->db->join('tb_master_items', 'tb_master_items.id = tb_stocks.item_id');
    $this->db->join('tb_master_item_groups', 'tb_master_item_groups.group = tb_master_items.group');
    $this->db->where('tb_master_item_groups.status', 'AVAILABLE');
    $this->db->where('tb_master_item_groups.group', $_SESSION['mix']['group']);
    $this->db->where('tb_master_item_groups.category', $_SESSION['mix']['category']);
    // $this->db->where('tb_stocks.condition', 'SERVICEABLE');
    $this->db->where('tb_stock_in_stores.quantity > ', 0);
    $this->db->where('tb_stock_in_stores.warehouse', $_SESSION['mix']['warehouse']);
    $this->db->where('tb_stock_in_stores.id != ', $_SESSION['mix']['mixing_item']);

    $this->db->order_by('tb_master_items.description ASC, tb_master_items.part_number ASC');

    $query  = $this->db->get();
    $result = $query->result_array();

    return $result;
  }

  public function adjustment($id)
  {
    $this->db->trans_begin();

    // GET STOCK IN STORES
    $this->db->from('tb_stock_in_stores');
    $this->db->join('tb_stocks', 'tb_stocks.id = tb_stock_in_stores.stock_id');
    $this->db->where('tb_stock_in_stores.id', $id);

    $query = $this->db->get();
    $stock = $query->unbuffered_row('array');

    $adjustment_quantity  = floatval($_POST['adjustment_quantity']);
    $remarks              = $_POST['remarks'];
    $date                 = date('Y-m-d');

    // RECALCULATE STOCK
    $current_quantity     = floatval($stock['quantity']);
    $stores_quantity      = $current_quantity + $adjustment_quantity;
    $prev_quantity        = floatval($stock['total_quantity']);
    $balance_quantity     = floatval($stock['total_quantity']) + $adjustment_quantity;
    $unit_value           = floatval($stock['unit_value']);
    $total_value          = $stores_quantity * $stock['unit_value'];
    $grand_total_value    = floatval($stock['grand_total_value']) + $total_value;

    if ($balance_quantity == 0){
      $average_value = 0;
    } else {
      $average_value = $grand_total_value / $balance_quantity;
    }

    // CREATE ADJUSTMENT
    if (!empty($remarks))
      $this->db->set('remarks', $remarks);

    $this->db->set('stock_in_stores_id', $id);
    $this->db->set('date_of_entry', $date);
    $this->db->set('period_year', config_item('period_year'));
    $this->db->set('period_month', config_item('period_month'));
    $this->db->set('previous_quantity', $current_quantity);
    $this->db->set('adjustment_quantity', $adjustment_quantity);
    $this->db->set('balance_quantity', $balance_quantity);
    $this->db->set('adjustment_token', date('YmdHis'));
    $this->db->set('created_by', config_item('auth_person_name'));
    $this->db->insert('tb_stock_adjustments');
    $insert_id = $this->db->insert_id();

    // UPDATE STOCK IN STORES
    // done by trigger: adjusment_update_stock_in_stores()

    // UPDATE STOCK
    // done by trigger: update_stock_in_stores_update_stock()

    // CREATE STOCK CARD
    // move to app_model::adjustment_approval()
    // if ($adjustment_quantity >= 0){
    //   $this->db->set('received_by', config_item('auth_person_name'));
    //   $this->db->set('received_from', 'ADJUSTMENT');
    // } else {
    //   $this->db->set('issued_by', config_item('auth_person_name'));
    //   $this->db->set('issued_to', 'ADJUSTMENT');
    // }

    // $this->db->set('stock_id', $stock['stock_id']);
    // $this->db->set('serial_id', $stock['serial_id']);
    // $this->db->set('warehouse', $stock['warehouse']);
    // $this->db->set('stores', $stock['stores']);
    // $this->db->set('date_of_entry', $date);
    // $this->db->set('period_year', config_item('period_year'));
    // $this->db->set('period_month', config_item('period_month'));
    // $this->db->set('document_type', 'ADJUSTMENT');
    // $this->db->set('quantity', $adjustment_quantity);
    // $this->db->set('prev_quantity', $prev_quantity);
    // $this->db->set('balance_quantity', $balance_quantity);
    // $this->db->set('unit_value', $unit_value);
    // $this->db->set('average_value', $average_value);
    // $this->db->set('created_by', config_item('auth_person_name'));
    // $this->db->set('remarks', $remarks);
    // $this->db->insert('tb_stock_cards');

    if ($this->db->trans_status() === FALSE)
      return FALSE;

    $this->db->trans_commit();

    $this->send_adjustment_request($insert_id);

    return TRUE;
  }

  public function send_adjustment_request($data)
  {
    $this->db->select(array(
      'tb_stock_adjustments.id',
      'tb_master_items.part_number',
      'tb_master_items.description',
      'tb_master_item_groups.category',
      'tb_master_items.group',
      'tb_stocks.condition',
      'tb_stock_adjustments.created_by',
      'tb_stock_adjustments.created_at',
      'tb_stock_adjustments.previous_quantity',
      'tb_stock_adjustments.adjustment_quantity',
      'tb_stock_adjustments.balance_quantity',
      'tb_master_items.unit',
      'tb_stock_adjustments.remarks',
      'tb_stock_adjustments.adjustment_token',
    ));
    $this->db->from('tb_stock_adjustments');
    $this->db->join('tb_stock_in_stores', 'tb_stock_in_stores.id = tb_stock_adjustments.stock_in_stores_id');
    $this->db->join('tb_stocks', 'tb_stocks.id = tb_stock_in_stores.stock_id');
    $this->db->join('tb_master_items', 'tb_master_items.id = tb_stocks.item_id');
    $this->db->join('tb_master_item_groups', 'tb_master_item_groups.group = tb_master_items.group');
    $this->db->where('tb_stock_adjustments.id', $data);

    $query = $this->db->get();
    $row  = $query->unbuffered_row('array');

    $this->load->library('My_PHPMailer');

    $message = "<p>Dear VP Finance,</p>";
    $message .= "<p>Berikut permintaan adjustment (Adjustment Request) dari ". $row['created_by'] ." yang dibuat pada tanggal ". $row['created_at'] ." :</p>";
    $message .= "<ul>";
    $message .= "<li>Deskripsi Barang: <strong>".$row['description']."</strong></li>";
    $message .= "<li>Part Number: <strong>".$row['part_number']."</strong></li>";
    $message .= "<li>Kategori Barang: <strong>".$row['category']."</strong></li>";
    $message .= "<li>Group Barang: <strong>".$row['group']."</strong></li>";
    $message .= "<li>Kondisi Barang: <strong>".$row['condition']."</strong></li>";
    $message .= "<li>Jumlah Adjustment diminta: <strong>".number_format($row['adjustment_quantity'])." ".$row['unit']."</strong></li>";
    $message .= "<li>Jumlah Stock Sebelumnya: <strong>".number_format($row['previous_quantity'])." ".$row['unit']."</strong></li>";
    $message .= "<li>Jumlah Setelah Adjustment: <strong>".number_format($row['balance_quantity'])." ".$row['unit']."</strong></li>";
    $message .= "<li>Remarks: <strong>".$row['remarks']."</strong></li>";
    $message .= "</ul>";
    $message .= "<p>Silakan klik pilihan <strong style='color:blue;'>APPROVE</strong> untuk menyetujui atau <strong style='color:red;'>REJECT</strong> untuk menolak permintaan ini.</p>";
    $message .= "<p>[ <a href='http://119.252.163.206/adjustment?mode=approved&id=".$row['id']."&token=".$row['adjustment_token']."' style='color:blue; font-weight:bold;'>APPROVE</a> ] | [ <a href='http://119.252.163.206/adjustment?mode=rejected&id=".$row['id']."&token=".$row['adjustment_token']."' style='color:red; font-weight:bold;'>REJECT</a> ]</p>";
    $message .= "<p>Thanks and regards</p>";

    $mail = new PHPMailer();
    $mail->IsSMTP();
    $mail->SMTPDebug = 2;
    $mail->SMTPAuth = true;
    $mail->SMTPSecure = "tls";
    $mail->Host = "smtp.live.com";
    $mail->Port = 587;
    $mail->Username = "imannurrahman@hotmail.com";
    $mail->Password = "webMaster.25";
    $mail->SetFrom('info@baliflightacademy.com', 'Material Resource Planning Software');
    // $mail->AddReplyTo($data['b_email'], $data['b_name']);
    $mail->Subject = "Permintaan Adjustment barang ".$row['description']." P/N#".$row['part_number'];
    $mail->Body = $message;
    $mail->IsHTML(true);
    $mail->AddAddress('emilia@baliflightacademy.com', 'Emilia');
    $mail->AddAddress('irma.djohan@baliflightacademy.com', 'Irma Djohan');
    // if(!$mail->Send()) {
    //   $this->pretty_dump($mail->ErrorInfo);
    // } else {
    //   return true;
    // }
    $mail->Send();

    return true;
  }

  public function pretty_dump($variable)
  {
      echo '<pre>';

      print_r($variable);

      echo '</pre>';

      exit();
  }

  public function relocation($id)
  {
    $this->db->trans_begin();

    // GET STOCK IN STORES
    $this->db->from('tb_stock_in_stores');
    $this->db->join('tb_stocks', 'tb_stocks.id = tb_stock_in_stores.stock_id');
    $this->db->where('tb_stock_in_stores.id', $id);

    $query = $this->db->get();
    $stock = $query->unbuffered_row('array');

    $relocation_stores    = $_POST['relocation_stores'];
    $remarks              = (empty($_POST['remarks'])) ? NULL : $_POST['remarks'];
    $date                 = date('Y-m-d');

    // RECALCULATE STOCK
    $current_quantity     = floatval($stock['quantity']);
    $stores_quantity      = $current_quantity + 0;
    $prev_quantity        = floatval($stock['total_quantity']);
    $balance_quantity     = floatval($stock['total_quantity']) + 0;
    $unit_value           = floatval($stock['unit_value']);
    $total_value          = $stores_quantity * $stock['unit_value'];
    $grand_total_value    = floatval($stock['grand_total_value']) + $total_value;

    if ($balance_quantity == 0){
      $average_value = 0;
    } else {
      $average_value = $grand_total_value / $balance_quantity;
    }

    // RELOCATE STOCK
    $this->db->set('stores', $relocation_stores);
    $this->db->where('id', $id);
    $this->db->update('tb_stock_in_stores');
	
    // CREATE STOCK CARD
    $this->db->set('received_by', config_item('auth_person_name'));
    $this->db->set('received_from', 'RELOCATION STORES');
    $this->db->set('stock_id', $stock['stock_id']);
    $this->db->set('serial_id', $stock['serial_id']);
    $this->db->set('warehouse', $stock['warehouse']);
    $this->db->set('stores', $relocation_stores);
    $this->db->set('date_of_entry', $date);
    $this->db->set('period_year', config_item('period_year'));
    $this->db->set('period_month', config_item('period_month'));
    $this->db->set('document_type', 'RELOCATION');
    $this->db->set('quantity', floatval(0));
    $this->db->set('prev_quantity', $prev_quantity);
    $this->db->set('balance_quantity', $balance_quantity);
    $this->db->set('unit_value', $unit_value);
    $this->db->set('average_value', $average_value);
    $this->db->set('created_by', config_item('auth_person_name'));
    $this->db->set('remarks', $remarks);
    $this->db->insert('tb_stock_cards');

    if ($this->db->trans_status() === FALSE)
      return FALSE;

    $this->db->trans_commit();
    return TRUE;
  }

  public function mix()
  {
    $this->db->trans_begin();

    // INCREASE STOCK
    $this->db->from('tb_stock_in_stores');
    $this->db->join('tb_stocks', 'tb_stocks.id = tb_stock_in_stores.stock_id');
    $this->db->where('tb_stock_in_stores.id', $_SESSION['mix']['mixing_item']);

    $query = $this->db->get();
    $stock = $query->unbuffered_row('array');

    $mixing_quantity    = floatval($_SESSION['mix']['mixing_quantity']);
    $remarks            = $_SESSION['mix']['notes'];
    $date               = date('Y-m-d');
    $current_quantity   = floatval($stock['quantity']);
    $prev_quantity      = floatval($stock['total_quantity']);
    $stores_quantity    = $current_quantity + $mixing_quantity;
    $balance_quantity   = floatval($stock['total_quantity']) + $mixing_quantity;
    $unit_value         = floatval($stock['unit_value']);
    $total_value        = $stores_quantity * $stock['unit_value'];
    $grand_total_value  = floatval($stock['grand_total_value']) + $total_value;

    if ($balance_quantity == 0){
      $average_value = 0;
    } else {
      $average_value = $grand_total_value / $balance_quantity;
    }

    if (!empty($remarks))
      $this->db->set('remarks', $remarks);

    $this->db->set('stock_in_stores_id', $_SESSION['mix']['mixing_item']);
    $this->db->set('date_of_entry', $date);
    $this->db->set('period_year', config_item('period_year'));
    $this->db->set('period_month', config_item('period_month'));
    $this->db->set('previous_quantity', $current_quantity);
    $this->db->set('adjustment_quantity', $mixing_quantity);
    $this->db->set('balance_quantity', $balance_quantity);
    $this->db->set('created_by', config_item('auth_person_name'));
    $this->db->insert('tb_stock_adjustments');

    if ($mixing_quantity >= 0){
      $this->db->set('received_by', config_item('auth_person_name'));
      $this->db->set('received_from', 'MIX');
    } else {
      $this->db->set('issued_by', config_item('auth_person_name'));
      $this->db->set('issued_to', 'MIX');
    }

    $this->db->set('stock_id', $stock['stock_id']);
    $this->db->set('serial_id', $stock['serial_id']);
    $this->db->set('warehouse', $stock['warehouse']);
    $this->db->set('stores', $stock['stores']);
    $this->db->set('date_of_entry', $date);
    $this->db->set('period_year', config_item('period_year'));
    $this->db->set('period_month', config_item('period_month'));
    $this->db->set('document_type', 'MIX');
    $this->db->set('quantity', $mixing_quantity);
    $this->db->set('prev_quantity', $prev_quantity);
    $this->db->set('balance_quantity', $balance_quantity);
    $this->db->set('unit_value', $unit_value);
    $this->db->set('average_value', $average_value);
    $this->db->set('created_by', config_item('auth_person_name'));
    $this->db->set('remarks', $remarks);
    $this->db->insert('tb_stock_cards');

    // DECREASE STOCK
    foreach ($_SESSION['mix']['mixed_items'] as $key => $mixed_items) {
      $this->db->from('tb_stock_in_stores');
      $this->db->join('tb_stocks', 'tb_stocks.id = tb_stock_in_stores.stock_id');
      $this->db->where('tb_stock_in_stores.id', $mixed_items['stock_in_stores_id']);

      $query = $this->db->get();
      $stock = $query->unbuffered_row('array');

      $mixed_quantity     = 0 - floatval($mixed_items['mixed_quantity']);
      $remarks            = 'Mixed to '. $_SESSION['mix']['description'] .' ('. $_SESSION['mix']['part_number'] .')';
      $current_quantity   = floatval($stock['quantity']);
      $stores_quantity    = $current_quantity - $mixed_quantity;
      $prev_quantity      = floatval($stock['total_quantity']);
      $balance_quantity   = floatval($stock['total_quantity']) + $mixed_quantity;
      $unit_value         = floatval($stock['unit_value']);
      $total_value        = $stores_quantity * $stock['unit_value'];
      $grand_total_value  = floatval($stock['grand_total_value']) + $total_value;

      if ($balance_quantity == 0){
        $average_value = 0;
      } else {
        $average_value = $grand_total_value / $balance_quantity;
      }

      if (!empty($remarks))
        $this->db->set('remarks', $remarks);

      $this->db->set('stock_in_stores_id', $mixed_items['stock_in_stores_id']);
      $this->db->set('date_of_entry', $date);
      $this->db->set('period_year', config_item('period_year'));
      $this->db->set('period_month', config_item('period_month'));
      $this->db->set('previous_quantity', $current_quantity);
      $this->db->set('adjustment_quantity', $mixed_quantity);
      $this->db->set('balance_quantity', $balance_quantity);
      $this->db->set('created_by', config_item('auth_person_name'));
      $this->db->insert('tb_stock_adjustments');

      if ($mixed_quantity >= 0){
        $this->db->set('received_by', config_item('auth_person_name'));
        $this->db->set('received_from', 'MIX');
      } else {
        $this->db->set('issued_by', config_item('auth_person_name'));
        $this->db->set('issued_to', 'MIX');
      }

      $this->db->set('stock_id', $stock['stock_id']);
      $this->db->set('serial_id', $stock['serial_id']);
      $this->db->set('warehouse', $stock['warehouse']);
      $this->db->set('stores', $stock['stores']);
      $this->db->set('date_of_entry', $date);
      $this->db->set('period_year', config_item('period_year'));
      $this->db->set('period_month', config_item('period_month'));
      $this->db->set('document_type', 'MIX');
      $this->db->set('quantity', $mixed_quantity);
      $this->db->set('prev_quantity', $prev_quantity);
      $this->db->set('balance_quantity', $balance_quantity);
      $this->db->set('unit_value', $unit_value);
      $this->db->set('average_value', $average_value);
      $this->db->set('created_by', config_item('auth_person_name'));
      $this->db->set('remarks', $remarks);
      $this->db->insert('tb_stock_cards');
    }

    if ($this->db->trans_status() === FALSE)
      return FALSE;

    $this->db->trans_commit();
    return TRUE;
  }

  public function isValidStores($stores, $warehouse, $group)
  {
    $this->db->select('tb_master_item_groups.category');
    $this->db->from('tb_master_item_groups');
    $this->db->where('UPPER(tb_master_item_groups.group)', strtoupper($group));

    $query  = $this->db->get();
    $row    = $query->unbuffered_row();

    $this->db->from('tb_master_stores');
    $this->db->where('UPPER(tb_master_stores.stores)', strtoupper($stores));
    $this->db->where('UPPER(tb_master_stores.warehouse)', strtoupper($warehouse));
    $this->db->where('UPPER(tb_master_stores.category)', strtoupper($row->category));

    $query = $this->db->get();

    return ( $query->num_rows() > 0 ) ? true : false;
  }

  public function import(array $user_data)
  {
    $this->db->trans_begin();

    foreach ($user_data as $key => $data){
      $reference_document = (empty($data['reference_document']))
        ? NULL : strtoupper($data['reference_document']);

      $expired_date = (empty($data['expired_date']))
        ? NULL : $data['expired_date'];

      $serial_number = (empty($data['serial_number']))
        ? NULL : strtoupper($data['serial_number']);

      $alternate_part_number = (empty($data['alternate_part_number']))
        ? NULL : strtoupper($data['alternate_part_number']);

      $part_number      = strtoupper($data['part_number']);
      $description      = strtoupper($data['description']);
      $group            = strtoupper($data['group']);
      $unit             = strtoupper($data['unit']);
      $warehouse        = strtoupper($data['warehouse']);
      $stores           = strtoupper($data['stores']);
      $condition        = strtoupper($data['condition']);
      $minimum_quantity = floatval($data['minimum_quantity']);
      $quantity         = floatval($data['quantity']);
      $unit_value       = floatval($data['unit_value']);
      $received_date    = $data['received_date'];
      $received_by      = $data['received_by'];
      $remarks          = $data['remarks'];
      $period_year      = get_setting('ACTIVE_YEAR');
      $period_month     = get_setting('ACTIVE_MONTH');

      // CREATE OR SKIP ITEM UNIT
      if (isItemUnitExists($unit) === FALSE){
        $data = array(
          'unit' => $unit,
          'created_by' => config_item('auth_person_name'),
          'updated_by' => config_item('auth_person_name'),
        );

        $this->db->insert('tb_master_item_units', $data);

        if ($this->db->affected_rows() == 0){
          die('tb_master_item_units');
        }
      }

      // GET ITEM_ID, CREATE OR SKIP ITEM
      if (isItemExists($part_number, $serial_number) === FALSE){
        $data = array(
          'part_number'           => $part_number,
          'serial_number'         => $serial_number,
          'alternate_part_number' => $alternate_part_number,
          'description'           => $description,
          'group'                 => $group,
          'unit'                  => $unit,
          'minimum_quantity'      => $minimum_quantity,
          'created_by'            => config_item('auth_person_name'),
          'updated_by'            => config_item('auth_person_name'),
        );

        $this->db->insert('tb_master_items', $data);

        if ($this->db->affected_rows() == 0){
          die('tb_master_items');
        }

        $item_id = $this->db->insert_id();
      } else {
        $item_id = getItemId($part_number, $serial_number);
      }

      // GET SERIAL_ID, OR CREATE SERIAL NUMBER
      if ($serial_number !== NULL){
        if (isSerialExists($item_id, $serial_number) === FALSE){
          $data = array(
            'item_id'       => $item_id,
            'serial_number' => $serial_number,
            'warehouse'     => $warehouse,
            'stores'        => $stores,
            'condition'     => $condition,
            'updated_by'    => config_item('auth_person_name'),
          );

          $this->db->set($data);
          $this->db->insert('tb_master_item_serials');

          if ($this->db->affected_rows() == 0){
            die('tb_master_item_serials');
          }

          $serial_id  = $this->db->insert_id();
        } else {
          $serial     = getSerial($item_id, $serial_number);
          $serial_id  = $serial->id;

          $data = array(
            'warehouse' => $warehouse,
            'stores' => $stores,
            'condition' => $condition,
          );

          $this->db->where('id', $serial_id);
          $this->db->set($data);
          $this->db->update('tb_master_item_serials');

          if ($this->db->affected_rows() == 0){
            die('update tb_master_item_serials');
          }
        }
      } else {
        $serial_id = NULL;
      }

      // GET STOCK_ID, OR CREATE STOCK
      if (isStockExists($item_id, $condition) === FALSE){
        $data = array(
          'item_id' => $item_id,
          'condition' => $condition,
          'initial_total_quantity' => $quantity,
          'initial_grand_total_value' => floatval($quantity * $unit_value),
          'initial_average_value' => $unit_value,
          'created_by' => config_item('auth_person_name'),
        );

        $this->db->insert('tb_stocks', $data);

        if ($this->db->affected_rows() == 0){
          die('tb_stocks');
        }

        $stock_id = $this->db->insert_id();
      } else {
        $stock_id = getStockId($item_id, $condition);
      }

      // CREATE STOCK IN STORES
      $data = array(
        'stock_id' => $stock_id,
        'serial_id' => $serial_id,
        'reference_document' => $reference_document,
        'warehouse' => $warehouse,
        'stores' => $stores,
        'initial_quantity' => $quantity,
        'initial_unit_value' => $unit_value,
        'previous_quantity' => $quantity,
        'quantity' => $quantity,
        'unit_value' => $unit_value,
        'received_by' => $received_by,
        'received_date' => $received_date,
        'expired_date' => $expired_date,
        'remarks' => $remarks,
        'created_by' => config_item('auth_person_name'),
      );

      $this->db->insert('tb_stock_in_stores', $data);

      if ($this->db->affected_rows() == 0){
        die('tb_stock_in_stores');
      }

      // UPDATE STOCK
      // done by trigger: insert_stock_in_stores_update_stock

      // UPDATE SERIAL NUMBER
      if ($serial_number !== NULL){
        $this->db->set('warehouse', $warehouse);
        $this->db->set('stores', $stores);
        $this->db->set('condition', $condition);
        $this->db->set('updated_at', date('Y-m-d'));
        $this->db->set('updated_by', config_item('auth_person_name'));
        $this->db->where('id', $serial_id);
        $this->db->update('tb_master_item_serials');

        if ($this->db->affected_rows() == 0){
          die('update tb_master_item_serials 2');
        }
      }

      // RECALCULATE STOCK
      $total_value        = $quantity * $unit_value;
      $stock_active       = getStockActive($stock_id);
      $balance_quantity   = floatval($stock_active->total_quantity) + $quantity;
      $grand_total_value  = floatval($stock_active->grand_total_value) + $total_value;
      $average_value      = ($balance_quantity == 0) ? 0 : floatval($grand_total_value / $balance_quantity);

      // CREATE STOCK CARD
      $data = array(
        'stock_id' => $stock_id,
        'serial_id' => $serial_id,
        'warehouse' => $warehouse,
        'stores' => $stores,
        'document_number' => $reference_document,
        'date_of_entry' => $received_date,
        'period_year' => $period_year,
        'period_month' => $period_month,
        'document_type' => 'IMPORT',
        'received_from' => 'IMPORT',
        'quantity' => $quantity,
        'balance_quantity' => $balance_quantity,
        'unit_value' => $unit_value,
        'average_value' => $average_value,
        'remarks' => $remarks,
        'created_by' => config_item('auth_person_name'),
      );

      if ($received_by !== NULL){
        $data['received_by'] = $received_by;
      } else {
        $data['received_by'] = config_item('auth_person_name');
      }

      $this->db->insert('tb_stock_cards', $data);

      if ($this->db->affected_rows() == 0){
        die('tb_stock_cards');
      }
    }

    if ($this->db->trans_status() === FALSE){
      return FALSE;
    }

    $this->db->trans_commit();
    return TRUE;
  }
}
